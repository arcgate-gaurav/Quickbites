create database quickbites;

use quickbites;
-- Customers Table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(100),
    Email VARCHAR(100),
    JoinDate DATE,
    City VARCHAR(50)
);

-- Restaurants Table
CREATE TABLE Restaurants (
    RestaurantID INT PRIMARY KEY,
    Name VARCHAR(100),
    Cuisine VARCHAR(50),
    City VARCHAR(50),
    Rating DECIMAL(3, 2)
);

-- Dishes Table
CREATE TABLE Dishes (
    DishID INT PRIMARY KEY,
    Name VARCHAR(100),
    RestaurantID INT,
    Price DECIMAL(10, 2),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

-- Orders Table
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    RestaurantID INT,
    OrderDate DATE,
    TotalAmount DECIMAL(10, 2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

-- Deliveries Table
CREATE TABLE Deliveries (
    DeliveryID INT PRIMARY KEY,
    OrderID INT,
    DeliveryPerson VARCHAR(100),
    DeliveryTime INT, -- Delivery time in minutes
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

-- Reviews Table
CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY,
    CustomerID INT,
    OrderID INT,
    Rating INT CHECK (Rating BETWEEN 1 AND 5),
    ReviewText TEXT,
    ReviewDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

-- Customers Data
INSERT INTO Customers (CustomerID, Name, Email, JoinDate, City) VALUES
(1, 'Alice Johnson', 'alice@example.com', '2022-01-15', 'New York'),
(2, 'Bob Smith', 'bob@example.com', '2022-03-10', 'Los Angeles'),
(3, 'Charlie Brown', 'charlie@example.com', '2023-02-05', 'Chicago');

-- Restaurants Data
INSERT INTO Restaurants (RestaurantID, Name, Cuisine, City, Rating) VALUES
(1, 'Pizza Palace', 'Italian', 'New York', 4.5),
(2, 'Sushi Central', 'Japanese', 'Los Angeles', 4.8),
(3, 'Taco Town', 'Mexican', 'Chicago', 4.2);

-- Dishes Data
INSERT INTO Dishes (DishID, Name, RestaurantID, Price) VALUES
(1, 'Margherita Pizza', 1, 12.99),
(2, 'Pepperoni Pizza', 1, 14.99),
(3, 'Sushi Platter', 2, 22.99),
(4, 'Taco Combo', 3, 9.99);

-- Orders Data ----------------
INSERT INTO Orders (OrderID, CustomerID, RestaurantID, OrderDate, TotalAmount) VALUES
(1, 1, 1, '2023-10-10', 27.98),
(2, 2, 2, '2023-10-11', 22.99),
(3, 3, 3, '2023-10-12', 19.98);

-- Deliveries Data
INSERT INTO Deliveries (DeliveryID, OrderID, DeliveryPerson, DeliveryTime) VALUES
(1, 1, 'John Doe', 30),
(2, 2, 'Jane Smith', 25),
(3, 3, 'Carlos Gonzalez', 40);

-- Reviews Data
INSERT INTO Reviews (ReviewID, CustomerID, OrderID, Rating, ReviewText, ReviewDate) VALUES
(1, 1, 1, 5, 'Excellent pizza and quick delivery!', '2023-10-11'),
(2, 2, 2, 4, 'Great sushi, but delivery was a bit late.', '2023-10-12'),
(3, 3, 3, 3, 'Tacos were okay, delivery took too long.', '2023-10-13');


-------------------------- Basic Queries--------------------------------

--     1. Retrieve the list of all dishes along with their restaurant names and prices.

Select D.Name as Dish, R.Name as Restaurant, D.Price as Price from Dishes as D
join Restaurants as R on R.RestaurantID = D.RestaurantID;

--     2. Find the average rating of all restaurants in New York.

Select AVG(rating) from Restaurants where City = 'New York' Group by City;



-- ---------------------Intermediate Queries-----------------------------

--     3. Calculate the total revenue generated by each restaurant.

Select Restaurants.Name, Sum(TotalAmount) as Revenue from Orders 

join Restaurants on Restaurants.RestaurantID = Orders.RestaurantID 

group by Orders.RestaurantID;

--     4. List the names of customers who have ordered more than once.

Select C.Name from Customers as C

Join Orders as O on O.CustomerID = C.CustomerID

Group by C.Name, O.CustomerID
having Count(O.CustomerID) > 1;


-- ----------------Advanced Queries with Window Functions--------------------

--     5. Use a window function to rank restaurants based on their average customer ratings.

Select Name, RANK() over(order by Avg(Rating) desc) as Restaurant_rank from Restaurants

Group by RestaurantID;



--     6. Calculate the cumulative total revenue for each restaurant.

select RestaurantID, OrderID, OrderDate, 
sum(TotalAmount) over(partition by RestaurantID order by OrderDate, OrderID) as CumulativeRevenue
from Orders;

--     7. Identify the top 2 most ordered dishes in each city using a window function.

Select City, Name from 
(Select R.City, D.Name, ROW_NUMBER() 
Over(Partition by R.City order by Count(*) desc) as rn from Orders O
Join Restaurants R on R.RestaurantID = O.RestaurantID
Join Dishes D on D.RestaurantID = R.RestaurantID
group by R.City, D.Name) as ranked

where rn <=2;

--     8. Find the average delivery time for each delivery person and rank them.

Select DeliveryPerson, Round(Avg(DeliveryTime)) as average_time,
Rank() Over(Order by AVG(DeliveryTime) asc) as Ranking 
from Deliveries group by DeliveryPerson;


-- ------------------------------Aggregations and Grouping----------------------
--     9. Retrieve the count of orders placed in each city.

Select City, Count(O.OrderID) as Order_Count from Restaurants 

Join Orders O on O.RestaurantID = Restaurants.RestaurantID

group by O.RestaurantID;


--     10. Calculate the average order value for each cuisine type.

Select Restaurants.Cuisine, AVG(TotalAmount) from Orders O

Join Restaurants on Restaurants.RestaurantID = O.RestaurantID

group by O.RestaurantID;


-- --------------------------------Filtering-------------------------------------

--     11. List all reviews with a rating below 4.

Select * from Reviews where Rating < 4;
 
--     12. Display all orders placed after October 1, 2023.

Select * from Orders where OrderDate > '2023-10-01';


-- ---------------------------------Joins----------------------------------------

--     13. Write a query to display order details along with the restaurant and customer names.

Select O.OrderID, O.OrderDate, O.TotalAmount, R.Name as Restaurant_Name, C.Name as Customer_Name from Orders O
Join Restaurants R on R.RestaurantID = O.RestaurantID
Join Customers C on C.CustomerID = O.CustomerID


--     14. Show all dishes ordered by each customer.


Select C.Name as Customer_Name, D.Name as Dish_Name
from Orders O
join Customers C on C.CustomerID = O.CustomerID
join Dishes D on D.RestaurantID = O.RestaurantID;



-- -------------------------------Subqueries--------------------------------------

--     15. Find the name of the customer who gave the lowest rating.

Select Name from Customers where CustomerId = (Select CustomerID from Reviews where Rating = (Select MIN(Rating) from Reviews));


--     16. Retrieve the most expensive dish for each cuisine type.

Select D.Name as Most_expensive_dish, R.Name as Restaurant_Name from Dishes D

Join Restaurants R on R.RestaurantID = D.RestaurantID

where Price in (Select Max(Price) from Dishes group by RestaurantID);


-- ----------------------------Analytical Queries---------------------------------


--     17. Identify the delivery person with the fastest average delivery time.

Select Avg(DeliveryTime), DeliveryPerson from Deliveries group by DeliveryPerson 
order by Avg(DeliveryTime) asc limit 1;

--     18. Calculate the average delivery time for all orders handled by "Carlos Gonzalez."

Select Avg(DeliveryTime) from Deliveries where DeliveryPerson = 'Carlos Gonzalez';

--     19. Use a window function to assign a rank to each review based on its date, grouped by customer.

Select CustomerID, ReviewDate, RANK() Over(Partition by CustomerID Order by ReviewDate) AS Ranking 
from Reviews;


-- -------------------------Advanced Window Functions----------------------------

--     20. Calculate the running total of revenue for orders by each customer.


Select CustomerID, OrderID,

Sum(TotalAmount) over(Partition by CustomerID order by OrderID)

from Orders;
 